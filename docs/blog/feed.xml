<!DOCTYPE html>
<html lang="fr-FR" prefix="og: http://ogp.me/ns#">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1, minimum-scale=1.0, maximum-scale=5.0" name="viewport"/>
  <meta content="IE=edge" http-equiv="X-UA-Compatible"/>
  <meta content="telephone=no" name="format-detection"/>
  <meta content="Bruno 'Hyweene' Giarrizzo" name="author"/>
  <meta content="Hack with Hyweene" name="webmaster"/>
  <meta content="fr" name="language"/>
  <meta content="fr" http-equiv="content-language"/>
  <meta content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" name="robots"/>
  <meta content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" name="googlebot"/>
  <meta content="index, follow, max-snippet:-1, max-image-preview:large, max-video-preview:-1" name="bingbot"/>
  <meta content="1 days" name="revisit-after"/>
  <meta content="never" name="expires"/>
  <meta content="General" name="rating"/>
  <meta content="yes" name="apple-mobile-web-app-capable"/>
  <meta content="https://www.hack-with-hyweene.com" name="identifier-URL"/>
  <link href="https://www.hack-with-hyweene.com/blog/feed.xml" rel="alternate" title="Hack with Hyweene - Blog RSS" type="application/rss+xml"/>
  <title>Hack with Hyweene</title>
  <meta content="Hack with Hyweene" name="title"/>
  <meta content="Bruno, Giarrizzo, Hyweene, Bruno Giarrizzo, Developpeur, DevOps, Git, Apple, Golang, Go, Python, Swift, SwiftUI, Docker, Kubernetes, POO, OOP, Programmation Orientée Objet, Programmation Fonctionnelle" name="keywords"/>
  <meta content="Freelance Developer, DevOps, Ethical Hacker" name="description"/>
  <link href="https://www.hack-with-hyweene.com/" rel="canonical"/>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="/static/css/prism.css" rel="stylesheet">
  </link>
 </head>
 <!-- Google tag (gtag.js) -->
 <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-S4T0SNK38Q">
 </script>
 <script>window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag('js', new Date()); gtag('config', 'G-S4T0SNK38Q');</script>
 <body class="bg-slate-800">
  <header class="z-40 h-24 w-full sm:mb-0 relative border-b border-gray-500 text-gray-300">
   <div class="bg-slate-900 bg-opacity-90 backdrop-blur absolute inset-0">
   </div>
   <div class="relative mx-auto flex h-full flex-row items-center justify-between lg:max-w-4xl px-5 lg:px-0 py-2">
    <div class="hidden lg:flex h-full mx-auto"><a class="h-14 my-auto" href="/"><img alt="favicon" class="h-14 my-auto mr-4" src="/static/img/cl-logo.svg"/></a></div>
    <div class="hidden lg:flex h-full flex-nowrap items-center"><a class="text-3xl text-gray-300 mr-4" href="/" translate="no"> <span class="font-bold">Hack</span><span class="px-1">with</span><span class="font-bold">Hyweene</span></a></div>
    <nav aria-label="Navigation" class="hidden lg:flex justify-end flex-grow tracking-wide mx-4">
     <h2 class="sr-only" id="navigation">Navigation</h2>
     <menu class="text-heading flex space-x-10 tracking-wider">
      <li class="group relative"><a class="flex cursor-pointer items-center gap-4 whitespace-nowrap py-4 text-base font-semibold" href="/blog/"> <span>Blog</span></a></li>
      <li><a class="inline-flex whitespace-nowrap text-base py-4 font-semibold" href="/liens/">Liens</a></li>
      <li class="group relative"><a class="inline-flex whitespace-nowrap text-base py-4 font-semibold" href="/apprendre/">Apprendre</a></li>
      <li><a class="inline-flex whitespace-nowrap text-base py-4 font-semibold" href="/cv/">CV</a></li>
      <li><a class="inline-flex whitespace-nowrap text-base py-4 font-semibold" href="/a-propos/">À Propos</a></li>
     </menu>
    </nav> <aside class="flex h-full w-full lg:hidden"><div class="sm:flex hidden h-full items-center"><a class="h-full" href="https://www.hack-with-hyweene.com"><img alt="favicon" class="h-full" src="/static/img/cl-logo.svg"/></a></div>
     <div class="lg:hidden flex-1 h-full flex-nowrap items-center p-5 pl-0 sm:pl-5 lg:text-center"><a class="text-3xl text-gray-300" href="/" translate="no"> <span class="font-bold">Hack</span><span class="px-1">with</span><span class="font-bold">Hyweene</span></a></div>
     <div class="flex items-center">
      <label class="relative z-[9999] cursor-pointer px-3 pr-0 py-6" for="ss-mobile-menu">
       <input class="peer hidden" id="ss-mobile-menu" type="checkbox"/>
       <svg class="feather feather-menu" fill="none" height="24" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
        <line x1="3" x2="21" y1="12" y2="12">
        </line>
        <line x1="3" x2="21" y1="6" y2="6">
        </line>
        <line x1="3" x2="21" y1="18" y2="18">
        </line>
       </svg>
       <div class="fixed inset-0 z-[9999] hidden h-full w-full bg-heading/50 backdrop-blur-sm peer-checked:block">
       </div>
       <div class="fixed top-0 right-0 z-[9999] h-full w-full translate-x-full overflow-y-auto overscroll-y-none transition duration-500 peer-checked:translate-x-0 peer-checked:shadow-heading">
        <div class="float-right min-h-full w-[85%] bg-slate-900 px-6 pt-12 shadow-2xl">
         <menu class="mt-8 mb-8 flex flex-col space-y-4 text-heading">
          <li><a class="whitespace-nowrap pb-1 font-semibold" href="/blog/">Blog</a></li>
          <li><a class="whitespace-nowrap pb-1 font-semibold" href="/liens/">Liens</a></li>
          <li><a class="whitespace-nowrap pb-1 font-semibold" href="/apprendre/">Apprendre</a></li>
          <li><a class="whitespace-nowrap pb-1 font-semibold" href="/cv/">CV</a></li>
          <li><a class="whitespace-nowrap pb-1 font-semibold" href="/a-propos/">A Propos</a></li>
         </menu>
        </div>
       </div>
      </label>
     </div>
    </aside>
   </div>
  </header>
  <main class="lg:max-w-4xl mt-10 mx-5 lg:mx-auto text-gray-300">
   <?xml version="1.0" encoding="utf-8"?>
   <feed xmlns="http://www.w3.org/2005/Atom">
    <title>hack-with-hyweene.com</title>
    <subtitle>Freelance Developer, DevOps, Ethical Hacker</subtitle>
    <updated></updated>
    <link href="https://www.hack-with-hyweene.com/blog/" rel="alternate" type="text/html">
     <id>https://www.hack-with-hyweene.com/blog/</id>
     <link href="https://www.hack-with-hyweene.com/blog/feed.xml" rel="self" type="application/atom+xml"/>
     <entry xml:lang="en">
      <title type="html">Hello World!</title> <author><name></name>
       <uri>https://www.hack-with-hyweene.com</uri>
      </author>
      <id>https://www.hack-with-hyweene.com/blog/hello-world/</id>
      <published>2020-08-27 09:30:00+00:00</published>
      <updated>2020-08-27 09:30:00+00:00</updated>
      <link rel="alternate" type="text/html"/>https://www.hack-with-hyweene.com/blog/hello-world/
      <summary>
       Hello World!</summary>
      <content type="html">
       <p class="text-base my-3 leading-relaxed">Hello World</p>
      </content>
     </entry>
     <entry xml:lang="en">
      <title type="html">Comment installer psycopg2-binary sur Apple M1</title> <author><name></name>
       <uri>https://www.hack-with-hyweene.com</uri>
      </author>
      <id>https://www.hack-with-hyweene.com/blog/comment-installer-psycopg2-binary-sur-apple-m1/</id>
      <published>2021-10-17 09:30:00+00:00</published>
      <updated>2021-10-17 09:30:00+00:00</updated>
      <link rel="alternate" type="text/html"/>https://www.hack-with-hyweene.com/blog/comment-installer-psycopg2-binary-sur-apple-m1/
      <summary>
       J'ai rencontré quelques difficultés en travaillant avec du code Python accédant à des bases de données PostgreSQL. Voici comment j'ai résolu le problème.</summary>
      <content type="html">
       <p class="text-base my-3 leading-relaxed">Le mois dernier, je me suis offert un Apple M1, un très bon ordinateur, puissant et avec une autonomie impressionnante.</p>
       <p class="text-base my-3 leading-relaxed">Mon travail avec est assez simple, je code des API Python, quelques applications frontales simples avec TypeScript/React, j'essaie un peu de Go, j'apprends Swift et j'administre quelques clusters Kubernetes. Rien de trop sophistiqué.</p>
       <p class="text-base my-3 leading-relaxed">J'essaie de travailler avec les dernières versions des logiciels que j'utilise, et dans ce cas, Python 3.10.</p>
       <p class="text-base my-3 leading-relaxed">Je l'ai installé avec brew, assez facilement :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">brew install python@3.10</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">J'ai eu des problèmes avec psycopg2-binary lors de l'installation des dépendances d'un des projets sur lesquels je travaille. Le message d'erreur que j'obtenais était celui-ci :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">Error: pg_config executable not found.

pg_config is required to build psycopg2 from source.  Please add the directory
containing pg_config to the $PATH or specify the full executable path with the
option:

    python setup.py build_ext --pg-config /path/to/pg_config build ...

or with the pg_config option in 'setup.cfg'.</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Il semble qu'il manque un fichier de configuration. J'ai essayé de résoudre ce problème en installant le serveur PostgreSQL pour obtenir ce fichier manquant :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">brew install postgresql@12</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">À ce stade, brew me dit de configurer le chemin vers PG dans mon PATH, de cette façon (en utilisant ZSH, il me dit évidemment de l'écrire dans .zshrc) :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">echo 'export PATH="/opt/homebrew/opt/postgresql@12/bin:$PATH"' &gt; ~/.zshrc</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Maintenant, tout est prêt, et je peux l'installer comme je le souhaite :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">pip(3) install psycopg2-binary</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Ou dans le répertoire de mon projet :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-bash rounded-lg">pipenv install psycopg2-binary</code>
</pre>
       </p>
      </content>
     </entry>
     <entry xml:lang="en">
      <title type="html">Comment j'ai enrichi des métriques Prometheus</title> <author><name></name>
       <uri>https://www.hack-with-hyweene.com</uri>
      </author>
      <id>https://www.hack-with-hyweene.com/blog/comment-j-ai-enrichi-des-metriques-prometheus/</id>
      <published>2022-05-05 09:30:00+00:00</published>
      <updated>2022-05-05 09:30:00+00:00</updated>
      <link rel="alternate" type="text/html"/>https://www.hack-with-hyweene.com/blog/comment-j-ai-enrichi-des-metriques-prometheus/
      <summary>
       Les métriques de l'exporter VMWare n'avaient pas toutes les informations que nous voulions. Voici comment je les ai enrichies.</summary>
      <content type="html">
       <h2 class="text-3xl font-bold my-5 leading-snug">Contexte</h2>
       <p class="text-base my-3 leading-relaxed">Dans ma mission actuelle, afin de mettre en place une fédération de métriques, nous devons collecter des métriques VMware.</p>
       <p class="text-base my-3 leading-relaxed">Nous avons donc utilisé le <a class="text-sky-500 font-semibold underline hover:text-sky-600 transition-colors duration-300" href="https://github.com/pryorda/vmware_exporter">vmware_exporter</a> de <a class="text-sky-500 font-semibold underline hover:text-sky-600 transition-colors duration-300" href="https://github.com/pryorda">Daniel Pryor</a>, et pour ne pas le modifier, j'ai écrit une petite interface avec fastapi.</p>
       <p class="text-base my-3 leading-relaxed">Les métriques sont récupérées par fastapi, analysées, enrichies, resérialisées, et récoltées par prometheus.</p>
       <p class="text-base my-3 leading-relaxed">Les noms des métriques doivent être mappés, car ils sont unifiés avec les métriques d'openstack et d'IBM cloud.</p>
       <p class="text-base my-3 leading-relaxed">La table de mappage est celle ci-dessous :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">MAPPING_METRICS_NAME = {
    "vmware_vm_power_state" : "power_state"
    "vmware_vm_cpu_usage_average"': "cpu_usage_percentage"
    "vmware_vm_mem_consumed_average": "memory_used"
    "vmware_vm_memory_max": "memory_total"
    "vmware_vm_mem_usage_average": "memory_usage_percentage",
    "vmware_vm_num_cpu": "vcpus"
}</code>
</pre>
       </p>
       <h2 class="text-3xl font-bold my-5 leading-snug">Étape 1 : Analyse des métriques de vmware_exporter</h2>
       <p class="text-base my-3 leading-relaxed">L'exporter est appelé depuis une fonction nommée request_exporter().</p>
       <p class="text-base my-3 leading-relaxed">La sortie de l'exporter est un grand fichier str qui doit être analysé pour être traité.</p>
       <p class="text-base my-3 leading-relaxed">J'ai utilisé prometheus_client.parser pour cela.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">from prometheus_client.parser import text_string_to_metric_families

data_from_exporter = request_exporter(target)
metric_families = text_string_to_metric_families(data_from_exporter)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">La variable metric_families est un objet à plusieurs niveaux contenant des métriques regroupées par nom de métrique.</p>
       <p class="text-base my-3 leading-relaxed">Elle peut être représentée comme un dict, où la clé est le metric_name et la valeur est une liste contenant toutes les métriques sous forme de tuples.</p>
       <p class="text-base my-3 leading-relaxed">Exemple :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">{
    "vmware_vm_power_state": [
        ("vmware_vm_power_state", {"vm_name": "vm1", "label2": "value2"}, 1),
        ("vmware_vm_power_state", {"vm_name": "vm2", "label2": "value2"}, 0),
    ]
}</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">J'ai donc fait un petit algorithme pour aplatir l'objet en une liste de dicts :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">processed_exporter_data = []

for family in data_from exporter:
    if family.name not in MAPPING_METRICS_NAME:
        continue
    for sample in family.samples:
        row dict = {}
        row dict["__name__"] = sample
        for key, value in sample.items():
            row dict[key] = value
        row_dict["value"] = sample
        processed exporter_data.append(row_dict)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">J'aurai alors une liste de dicts, à partir de laquelle un dataframe peut être créé.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">[
    {"__name__": "vmware_vm_power_state", "vm_name": "vm1", "value": 1},
    {"__name__": "vmware_vm_power_state", "vm_name": "vm2", "value": 0},
]</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Maintenant, jouons avec les dataframes...</p>
       <h2 class="text-3xl font-bold my-5 leading-snug">Étape 2 : Jouer avec les dataframes</h2>
       <p class="text-base my-3 leading-relaxed">Tout d'abord, je crée le dataframe :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">import pandas

metrics_df = pandas.DataFrame(processed_exporter_data)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Ensuite, je supprime les étiquettes inutiles :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">metrics_df.drop(
    colums=[
        "host_name",
        "ds_name",
        "dc_name",
        "cluster_name",
    ],
    axis=1,
    inplace=True,
)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">De cette façon, j'utilise le dataframe pour supprimer les 4 colonnes.
        <code class="language-python rounded-lg">
         inplace=True</code>est utilisé pour écraser le dataframe existant et ne pas en créer un nouveau.</p>
       <p class="text-base my-3 leading-relaxed">Ensuite, je dois fusionner les données de métriques avec les données de deux autres sources de données internes (une pour le référentiel des hôtes/vm, une pour les lignes métier).</p>
       <p class="text-base my-3 leading-relaxed">Celles-ci sont également représentées sous forme de dataframes.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">businesslines_referential_df = referential_df.merge(
    businesslines_df, how="left", left_on="ecosystem", right_index=True
)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Cette fusion enrichira le dataframe référentiel avec les données des lignes métier, de droite à gauche, selon le nom de l'écosystème et utilisera l'index du dataframe de droite comme clé de jointure.</p>
       <p class="text-base my-3 leading-relaxed">Maintenant, il est temps de fusionner ce dataframe avec le dataframe des métriques.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">metrics_df = metrics_df.merge(
    businesslines_referential_df, how="inner", left_on="vm_name", right_index=True
)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Cette fusion est faite avec la méthode inner, ainsi nous ne gardons que les colonnes communes, selon vm_name.</p>
       <p class="text-base my-3 leading-relaxed">Maintenant, je remplace le nom de métrique original par le mappage dont nous avons parlé plus tôt :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">metrics_df.replace({"__name_": MAPPING_METRICS_NAME}, inplace=True)
</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Maintenant "vmware_vm_power_state" est mappé à "power_state".</p>
       <p class="text-base my-3 leading-relaxed">Le résultat est similaire à ceci :</p>
       <p class="text-base my-3 leading-relaxed">
        <table border="1px solid #fff" width="100%">
         <tr>
          <th>__name__</th>
          <th>vm_name</th>
          <th>ecosystem</th>
          <th>business_line</th>
          <th>value</th>
         </tr>
         <tr>
          <td>power_state</td>
          <td>vm1</td>
          <td>TESTECO</td>
          <td>BL1</td>
          <td>1</td>
         </tr>
        </table>
       </p>
       <p class="text-base my-3 leading-relaxed">Maintenant, pour être récoltées par prometheus, ces données doivent être resérialisées.</p>
       <h2 class="text-3xl font-bold my-5 leading-snug">Étape 3 : Comment ai-je resérialisé les données ?</h2>
       <p class="text-base my-3 leading-relaxed">Les chaînes de métriques Prometheus sont assez simples :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">metric_name{label1="value1", label2="value2"} 0</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">En utilisant une compréhension de liste, j'itère sur le dataframe pour imprimer une chaîne contenant au début le metric_name et à la fin la metric_value.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">return "\n".join(
    [
        f"{row['__name__']}{generate_dict_label(row)} {row['value']}"
        for index, row in metrics df.iterrows()
    ]
)</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">La partie délicate est de générer les étiquettes, car nous ne pouvons pas modifier la sortie d'un dict en python.</p>
       <p class="text-base my-3 leading-relaxed">Un dict en python ressemble à
        <code class="language-python rounded-lg">
         {"key": "value"}</code>, nous devons générer une chaîne qui ressemble à
        <code class="language-python rounded-lg">
         {label="value"}</code>
       </p>
       <p class="text-base my-3 leading-relaxed">J'ai donc écrit une petite fonction qui génère cette chaîne.</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">def generate_dict_label(row):

    labels = set(row.index) - {"__name__", "value"}

    return (
        "{"
        + ",".join(
            [
                f'{key}="{value}"'
                for key, value in row.items()
                if key in labels
            ]
        )
        + "}"
    )</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Finalement, les données sérialisées ressemblent à :</p>
       <p class="text-base my-3 leading-relaxed">
        <pre>
<code class="language-python rounded-lg">power_state{vm_name="vm1", ecosystem="TESTECO", business_line="BL1"} 1</code>
</pre>
       </p>
       <p class="text-base my-3 leading-relaxed">Maintenant, les métriques sont récoltées par prometheus en appelant un petit module fait avec fastapi, qui analysera, enrichira et resérialisera les données provenant d'un exporter prometheus vmware.</p>
      </content>
     </entry>
    </link>
   </feed>
  </main>
  <footer class="px-5 mt-10 xl:px-0 bg-slate-900 text-gray-200 border-t border-gray-500">
   <div class="mx-auto lg:max-w-4xl">
    <div class="pt-5 pb-5 grid grid-cols-1 md:grid-cols-4 md:gap-4">
     <div class="mx-auto md:mx-0 md:col-span-1">
      <img alt="logo" class="aspect-square object-fill rounded-lg" loading="lazy" src="/static/img/hyweene.jpg">
      </img>
     </div>
     <div class="pt-5 md:pl-5 md:pt-0 my-auto md:col-span-3 text-md text-gray-200">
      <div>
       <h2 class="text-2xl font-semibold text-white">Hyweene</h2>
       <p class="pt-2">Je m'appelle Hyweene (aussi connu comme Bruno Giarrizzo), 35 ans.</p>
       <p class="pt-2">Je suis un ancien administrateur système et réseau, j'ai pris la décision de me reconvertir dans le développement web et mobile.</p>
       <p class="pt-2">Ce site est la compilation de ce que j'apprends pour combler mes propres lacunes et, peut être, aider d'autres à apprendre.</p>
       <p class="pt-2">Vous voulez en savoir plus sur le pourquoi de ce site ? <a class="text-sky-400/75 font-semibold underline hover:text-sky-400 transition-colors duration-300" href="/a-propos/">Cliquez ici</a>.</p>
      </div>
     </div>
    </div>
   </div>
   <div class="pt-5 pb-5 border-t border-gray-500 mx-auto lg:max-w-4xl">
    <p>Swift, SwiftUI, le logo Swift, Swift Playgrounds, Xcode, Instruments, Cocoa Touch, Touch ID, AirDrop,
            iBeacon, iPhone, iPad, Safari, App Store, watchOS, tvOS, Mac et macOS sont des marques déposées d'Apple
            Inc., enregistrées aux États-Unis et dans d'autres pays.</p>
   </div>
   <div class="flex flex-col-reverse mx-auto justify-between pt-5 pb-5 lg:flex-row bg-top border-t border-gray-500 lg:max-w-4xl">
    <ul>
     <li class="inline-block mr-5"><a class="text-md text-gray-200 hover:text-blue-400 transition-colors duration-300 font-semibold" href="/a-propos/">A Propos</a></li>
     <li class="inline-block mr-5"><a class="text-md text-gray-200 hover:text-blue-400 transition-colors duration-300 font-semibold" href="/mentions-legales/">Mentions Légales</a></li>
    </ul>
    <ul class="flex flex-col mb-3 lg:mb-0 sm:space-y-0 sm:space-x-5 sm:flex-row"><span class="text-md text-gray-200 font-semibold tracking-tight">© 2024</span><a class="text-md text-gray-200 hover:text-blue-400 transition-colors duration-300 font-semibold tracking-tight" href="/">Hack-With-Hyweene.com</a></ul>
   </div>
  </footer>
  <!-- Favicon -->
  <link href="https://www.hack-with-hyweene.com/static/img/cl-logo.svg" rel="icon"/>
 </body>
</html>
