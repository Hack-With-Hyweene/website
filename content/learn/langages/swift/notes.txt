# Swift

## 1. Introduction à Swift

- Histoire et évolution de Swift
- Comparaison avec Objective-C et autres langages modernes
- Environnement de développement (Xcode, Swift Playgrounds)
- REPL (Read-Eval-Print Loop) de Swift

## 2. Fondamentaux

### 2.1 Syntaxe de base

- Variables et constantes (var, let)
- Types de données de base (Int, Double, String, Bool)
- Inférence de type et type annotation
- Opérateurs arithmétiques et logiques
- Interpolation de chaînes

### 2.2 Structures de contrôle

- Conditions (if, else, guard)
- Boucles (for-in, while, repeat-while)
- Switch et pattern matching avancé

### 2.3 Collections

- Arrays
- Dictionaries
- Sets
- Tuples

### 2.4 Fonctions

- Déclaration et appel de fonctions
- Paramètres et valeurs de retour
- Paramètres in-out
- Fonctions variadiques
- Fonctions comme types de première classe

### 2.5 Closures

- Syntaxe des closures
- Trailing closures
- Capture de valeurs
- Escaping et non-escaping closures

### 2.6 Gestion des erreurs

- Définition et lancement d'erreurs (throw)
- Gestion des erreurs (do-catch)
- Propagation des erreurs
- Optionnels et gestion des erreurs

## 3. Concepts avancés

### 3.1 Optionnels

- Concept et utilisation des optionnels
- Optional binding (if let, guard let)
- Optional chaining
- Nil-coalescing operator
- Implicitly unwrapped optionals

### 3.2 Protocoles

- Définition et conformité aux protocoles
- Protocoles comme types
- Extensions de protocoles
- Protocol-oriented programming

### 3.3 Extensions

- Extension de types existants
- Ajout de méthodes et propriétés calculées
- Conformité aux protocoles via extensions
- Extensions génériques

### 3.4 Génériques

- Fonctions génériques
- Types génériques (classes, structures, énumérations)
- Contraintes de type
- Associated types dans les protocoles

### 3.5 Programmation orientée objet

- Classes et héritage
- Initialisation et deinitialisation
- Propriétés (stored, computed, property observers)
- Méthodes (instance, type, et mutating)
- Contrôle d'accès (public, internal, private, fileprivate)

### 3.6 Programmation fonctionnelle

- Higher-order functions (map, filter, reduce)
- Fonctions pures et effets de bord
- Immutabilité et structures de données persistantes
- Composition de fonctions

### 3.7 Métaprogrammation

- Property wrappers
- Function builders
- Macros (à partir de Swift 5.9)

## 4. Gestion de la mémoire et performance

### 4.1 Automatic Reference Counting (ARC)

- Fonctionnement d'ARC
- Strong, weak, et unowned references
- Cycles de rétention et leur résolution
- Capture lists dans les closures

### 4.2 Value semantics vs Reference semantics

- Structures vs Classes
- Copy-on-write
- Inout parameters et mutabilité

### 4.3 Optimisation des performances

- Mesure des performances (Time Profiler, Instruments)
- Optimisations du compilateur
- Inline caching et dynamic dispatch
- Utilisation efficace des collections

## 5. Concurrence et asynchronisme

### 5.1 Grand Central Dispatch (GCD)

- Queues (main, global, custom)
- Dispatch groups
- Dispatch semaphores
- Dispatch barriers

### 5.2 Operations et Operation Queues

- Création et utilisation d'opérations
- Dépendances entre opérations
- KVO et opérations

### 5.3 Modern Concurrency (Swift 5.5+)

- async/await
- Structured concurrency (TaskGroup)
- Actors
- Sendable protocol
- Continuations

### 5.4 Combine framework

- Publishers et Subscribers
- Operators
- Subjects
- Schedulers
- Integration avec SwiftUI

## 6. Interopérabilité

### 6.1 Swift et Objective-C

- Utilisation de code Objective-C dans Swift
- Exposition de code Swift à Objective-C
- Bridging header

### 6.2 Swift et C

- Utilisation de code C dans Swift
- Pointeurs et gestion de la mémoire manuelle

## 7. Patterns et best practices en Swift

- SOLID principles en Swift
- Protocol-Oriented Programming (POP)
- Dependency Injection
- MVVM, MVC, et autres patterns architecturaux en Swift

## 8. Testing en Swift

- XCTest framework
- Unit testing
- UI testing
- Performance testing
- Mocking et stubbing en Swift

## 9. Swift Package Manager

- Création de packages
- Dépendances et versioning
- Publication de packages

## 10. Nouveautés et évolution du langage

- Fonctionnalités récentes (ex: Result type, Opaque return types)
- Propositions d'évolution de Swift (Swift Evolution)
- Participation à la communauté Swift
