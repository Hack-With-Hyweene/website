
## 2. Git

### 2.2 Fondamentaux de Git

#### 2.2.1 Commandes de base

- git init et git clone
- git add et staging area
- git commit et bonnes pratiques pour les messages de commit
- git status, git log, et git diff
- git push et git pull
- git fetch vs git pull

#### 2.2.2 Branches et fusion

- Création et gestion des branches (git branch, git checkout, git switch)
- Fusion de branches (git merge)
- Résolution des conflits de base
- Stratégies de branchement (feature branches, release branches)

#### 2.2.3 Remote repositories

- Ajout et gestion des remotes (git remote)
- Travail avec des repositories distants (GitHub, GitLab, Bitbucket)

### 2.3 Workflows Git avancés

#### 2.3.1 Modèles de workflow

- GitFlow : branches de fonctionnalités, de release et de hotfix
- GitHub Flow : modèle simplifié basé sur les pull requests
- Gitlab Flow : intégration continue et déploiement continu
- Trunk-based development

#### 2.3.2 Techniques avancées

- Rebase et ses utilisations (git rebase)
- Rebase interactif pour nettoyer l'historique
- Cherry-picking (git cherry-pick)
- Utilisation de tags pour le versioning (git tag)

#### 2.3.3 Gestion des sous-modules et des sous-arbres

- Sous-modules Git : ajout, mise à jour et gestion
- Sous-arbres Git : alternative aux sous-modules

### 2.4 Collaboration et revue de code

#### 2.4.1 Pull requests

- Création et gestion des pull requests
- Bonnes pratiques pour les pull requests
- Revue de code efficace

#### 2.4.2 Gestion des conflits

- Stratégies avancées de résolution des conflits
- Utilisation d'outils de fusion (mergetools)
- Prévention des conflits

#### 2.4.3 Automatisation avec Git hooks

- Hooks côté client (pre-commit, post-commit, etc.)
- Hooks côté serveur
- Intégration des hooks avec les outils CI/CD

### 2.5 Techniques avancées et outils

#### 2.5.1 Gestion de l'historique

- Réécriture de l'historique (git commit --amend, git rebase -i)
- Utilisation de git reflog pour récupérer des commits perdus
- Nettoyage du repository (git gc, git prune)

#### 2.5.2 Bisection et débogage

- Utilisation de git bisect pour trouver les régressions
- Débogage avec git blame

#### 2.5.3 Outils et intégrations

- Interfaces graphiques pour Git (GitKraken, SourceTree, etc.)
- Intégration de Git dans les IDE
- Outils d'analyse de repository (GitStats, Git-stats)

### 2.6 Sécurité et bonnes pratiques

- Gestion des secrets et données sensibles
- Signature des commits et des tags
- Bonnes pratiques pour la sécurité du repository

### 2.7 Git à grande échelle

- Gestion de grands repositories
- Stratégies pour les monorepos
- Git avec des équipes distribuées

### 2.8 Personnalisation et configuration avancée

- Configuration globale et locale de Git
- Alias Git pour la productivité
- Personnalisation de l'environnement Git

### 2.9 Migrations et interopérabilité

- Migration depuis d'autres VCS vers Git
- Utilisation de Git avec d'autres VCS (Git-SVN, etc.)

### 2.10 Résolution de problèmes et récupération

- Diagnostic et résolution des problèmes courants
- Récupération de commits perdus ou de branches supprimées
- Gestion des corruptions de repository
