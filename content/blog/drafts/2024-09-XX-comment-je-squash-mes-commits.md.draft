---
title: "Comment je squash mes commits git"
summary: "Squasher ses commits pour une meilleure lisibilité"
publish_date: 2024-09-16T09:30:00Z
update_date: 2024-09-16T09:30:00Z
category: "Pense-bête"
tags: [git, commit, squash, rebase]
---

## Pourquoi squasher ses commits ?

Squasher ses commits permet de garder un historique propre, lisible, et compréhensible. Cela permet de garder une trace de l'évolution du code, sans encombrer l'historique de commits inutiles.

## Mes deux méthodes préférées

Il y a deux méthodes que je préfère pour squasher mes commits, une rapide, et une, rapide également, mais plus complète.

### Méthode Rapide

Dans cette méthode, j'ai juste une liste de commits à squasher (3, 4, ou plus), et je veux les fusionner en un seul commit.

D'abord je liste mes commits, avec git log par exemple :

```bash
git log --oneline
```

Cette commande m'affiche la liste de mes commits, leur id et leur message.

On peut aussi utiliser tig, qui fait la même chose, mais avec une interface graphique :

```bash
tig
```

### Méthode Complète

Dans cette méthode, j'ai toujours 3, 4, ou plus de commits à squasher, mais dedans s'est glissé un commit de merge. Je veux fusionner tous les commits en un seul, mais je veux aussi supprimer le commit de merge.

D'abord il faut récupérer l'id du commit de base de la branche en cours, je fais ca avec git merge-base :

```bash
git merge-base brancheEnCours branchePrincipale
```

Ce qui donne dans mon repo :

```bash
git merge-base feature main
```

Ensuite, je lance la commande git rebase -i avec l'id du commit de base :

```bash
git rebase -i idDuCommitDeBase
```

Vim s'ouvre avec la liste des commits à squasher, je remplace pick par squash pour les commits que je veux fusionner.

Pour terminer, je push avec l'option force :

```bash
git push origin main --force
```

## Conclusion

J'avoue préférer la méthode complète, car étrangement plus facile à retenir pour moi. Et elle me fait gagner du temps :)
